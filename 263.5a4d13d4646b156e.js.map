{"version":3,"file":"263.5a4d13d4646b156e.js","mappings":"mVAAAA,iBAGmC,SAE/BA,yBACFA,QACAA,aAAGA,sBAAUA,mDAgCTA,yBAAqD,iBACzCA,sEAASA,mBAAa,GAC9BA,kBACAA,2BAAiB,uBACoBA,SAAmBA,0CAFlBA,kCAAqBA,wBAEtBA,qDAN7CA,eAAqB,sBAEjBA,kCAQFA,iCARkCA,uEAUpCA,eAAsB,cAEhBA,kBACFA,iCADwCA,oFAzC9CA,iBAAkG,kBAAlGA,CAAkG,sBAAlGA,CAAkG,cAGLA,yDAASA,wBAAe,GAC7GA,oBAAUA,iBAAKA,UAEjBA,iBAA2C,WACuBA,sBAAUA,UAE5EA,qBAAyFA,yDAASA,qBAAY,GAC5GA,qBAAUA,mBAAMA,cAKtBA,2BAAiF,uBAAjFA,CAAiF,eAAjFA,CAAiF,eAGjEA,mBAAMA,UAElBA,qBAA+DA,0FAA/DA,QACAA,sBAAmCA,yDAASA,sBAAa,GACvDA,qBAAUA,kBAAKA,cAKrBA,yBAYAA,yBAKFA,gCA3CuEA,wCAclBA,yCAKgBA,uCAO7DA,mCAYAA,qCC7CR,MAAMC,EAAiB,CACrB,CACEC,KAAM,GACNC,UCOJ,MAAM,MAAOC,EAaXC,YAAoBC,EAAwBC,EACxBC,GADAC,cAAwBA,gBACxBA,mBAZpBA,gBAAa,GACbA,WAAQ,cAIRA,mBAAe,EAGfA,kBAAe,GACRA,qBAAiB,CAG6B,CAErDC,WAGED,KAAKD,YAAYG,mBACdC,UACEC,IACCJ,KAAKK,gBAAiB,OACIC,IAA1BC,GAAoE,IAA7BH,EAAkBI,OACvDR,KAAKS,aAAe,qCAEpBT,KAAKU,UAAYN,GAGpBO,IACCC,MAAM,4BAA8BD,EAA/B,EAGZ,CAEDE,gBACEb,KAAKF,SAASgB,MACf,CAEDC,aACEf,KAAKgB,cAAe,EACpBhB,KAAKiB,UAAUC,cAAcC,OAC9B,CACDC,cACEpB,KAAKqB,WAAa,GAClBrB,KAAKgB,cAAe,CACrB,CAEDM,QAAQC,GACNvB,KAAKH,OAAO2B,cAAc,cAAgBD,EAAYE,IAAIC,KAAKC,MAChE,CAEDC,iBACE,OAAwB,OAApB5B,KAAKqB,YAA2C,KAApBrB,KAAKqB,WAC5BrB,KAAKU,UAELV,KAAKU,UAAUmB,OAAOC,GAAKA,EAAEC,SAASC,SAAUhC,KAAKqB,YAE/D,+CA1DU1B,GAAmBJ,6DAAnBI,EAAmBsC,s2CFdhC1C,uBAUAA,+BAVMA,+BAUAA,2+BEIOI,CAAb,ODCO,IAAMuC,EAAb,MAAM,MAAOA,kDAAuB,0BAAvBA,gCAHDC,cAAsB3C,GACtB2C,QAECD,CAAb,uBEmDME,QAAN,MAAMA,GAENA,SAAoBC,UAAO,SAAqCC,GAAK,OAAO,IAAKA,GAAKF,EAAyB,EAC/GA,EAAoBG,UAAqBC,MAAwB,CAAEC,KAAML,IACzEA,EAAoBM,UAAqBF,MAAwB,IAJ3DJ,MC3COO,EAAb,MAAM,MAAOA,kDAAgB,0BAAhBA,gCATLC,KACAC,KACAX,EACAY,IACAC,KACAX,EACAY,QAGKL,CAAb","names":["i0","routes","path","component","SelectCropComponent","constructor","router","location","cropService","this","ngOnInit","getCropsListData","subscribe","cropsListResponse","requestingCrop","undefined","e","length","NO_NEW_CROPS","cropsList","err","alert","backToMyCrops","back","openSearch","toggleSearch","searchbar","nativeElement","focus","searchClose","searchText","addCrop","clickedCrop","navigateByUrl","id","then","r","filterFunction","filter","i","cropName","includes","selectors","SelectCropRoutingModule","RouterModule","Ng2SearchPipeModule","ɵfac","t","ɵmod","ɵngcc0","type","ɵinj","SelectCropModule","CommonModule","FlexLayoutModule","MaterialModule","FormsModule","MatProgressSpinnerModule"],"sourceRoot":"webpack:///","sources":["./src/app/components/select-crop/select-crop.component.html","./src/app/components/select-crop/select-crop-routing.module.ts","./src/app/components/select-crop/select-crop.component.ts","./node_modules/ng2-search-filter/ng2-search-filter.js","./src/app/components/select-crop/select-crop.module.ts"],"sourcesContent":["<div *ngIf=\"requestingCrop\"\n     fxFlexFill fxLayout=\"column\"\n     fxLayoutGap=\"25px\"\n     fxLayoutAlign=\"center center\">\n  <div>\n    <mat-spinner diameter=\"100\" color=\"primary\"></mat-spinner>\n  </div>\n  <p>Loading...</p>\n</div>\n\n<div *ngIf=\"!requestingCrop\" class=\"add-crop\" style=\"overflow-x:hidden;\" fxFlexFill cdkScrollable>\n  <mat-toolbar class=\"add-crop-header mat-elevation-z4 custom-toolbar\" [class.hidden]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button mat-icon-button class=\"toolbar-title\" aria-label=\"Icon-button with close icon\" (click)=\"backToMyCrops()\">\n        <mat-icon>close</mat-icon>\n      </button>\n      <div style=\"padding:8px 0 0 10px; flex:1;\">\n        <div class=\"mat-title toolbar-title\" style=\"margin-bottom:2px;\">Add a crop</div>\n      </div>\n      <button mat-icon-button class=\"toolbar-title\" aria-label=\"Icon-button with search icon\"  (click)=\"openSearch()\">\n        <mat-icon>search</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-toolbar class=\"search-block mat-elevation-z4\" [class.active]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button class=\"search-icon\" mat-icon-button disabled>\n        <mat-icon>search</mat-icon>\n      </button>\n      <input class=\"search-control\" type=\"text\" placeholder=\"Search\" [(ngModel)]=\"searchText\">\n      <button mat-button mat-icon-button (click)=\"searchClose()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <div *ngIf=cropsList>\n    <mat-grid-list class=\"grid\" cols=\"2\" rowHeight=\"1:1\"    gutterSize=\"2px\">\n      <mat-grid-tile *ngFor=\"let crop of filterFunction()\">\n        <mat-card (click)=\"addCrop(crop)\">\n          <img mat-card-image class=\"cardImage\" src=\"{{ crop.url }}\" alt=\"{{ crop.cropName }}\" />\n          <mat-card-footer>\n            <mat-card-title class=\"cardTittle\">{{ crop.cropName }}</mat-card-title>\n          </mat-card-footer>\n        </mat-card>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </div>\n  <div *ngIf=!cropsList>\n      <mat-card>\n        <img mat-card-image class=\"cardImage\" src=\"{{ NO_NEW_CROPS }}\" />\n      </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SelectCropComponent } from './select-crop.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SelectCropComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SelectCropRoutingModule { }\n","import { Location } from '@angular/common';\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { CropListResponse } from '../../models/api/CropListResponse';\nimport { Crop } from '../../models/Crop';\nimport { CropDataService } from '../../service/CropDataService';\n\n@Component({\n  selector: 'app-select-crop',\n  templateUrl: './select-crop.component.html',\n  styleUrls: ['./select-crop.component.scss']\n})\n\nexport class SelectCropComponent implements OnInit{\n\n  searchText = '';\n  title = 'Select Crop';\n\n  @ViewChild('searchbar') searchbar: ElementRef;\n\n  toggleSearch = false;\n  cropsList: Crop[];\n  myCrops: CropListResponse;\n  NO_NEW_CROPS = '';\n  public requestingCrop = true;\n\n  constructor(private router: Router, private location: Location,\n              private cropService: CropDataService) { }\n\n  ngOnInit(): void {\n\n    // Get list of crops from backend service\n    this.cropService.getCropsListData()\n      .subscribe(\n        (cropsListResponse) => {\n          this.requestingCrop = false;\n          if (cropsListResponse === undefined || cropsListResponse.length === 0) {\n            this.NO_NEW_CROPS = 'assets/crops-images/noNewCrops.PNG';\n          } else {\n            this.cropsList = cropsListResponse;\n          }\n        },\n        (err) => {\n          alert('Could not get crop list: ' + err);\n        }\n      );\n  }\n\n  backToMyCrops(){\n    this.location.back();\n  }\n\n  openSearch() {\n    this.toggleSearch = true;\n    this.searchbar.nativeElement.focus();\n  }\n  searchClose() {\n    this.searchText = '';\n    this.toggleSearch = false;\n  }\n\n  addCrop(clickedCrop: Crop) {\n    this.router.navigateByUrl('/seed-date/' + clickedCrop.id).then(r => {});\n  }\n\n  filterFunction(): Crop[]{\n    if (this.searchText === null || this.searchText === ''){\n      return this.cropsList;\n    }else{\n      return this.cropsList.filter(i => i.cropName.includes( this.searchText));\n    }\n  }\n}\n","import { Injectable, NgModule, Pipe } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nclass Ng2SearchPipe {\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    transform(items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    static filter(items, term) {\n        const /** @type {?} */ toCompare = term.toLowerCase();\n        /**\n         * @param {?} item\n         * @param {?} term\n         * @return {?}\n         */\n        function checkInside(item, term) {\n            for (let /** @type {?} */ property in item) {\n                if (item[property] === null || item[property] == undefined) {\n                    continue;\n                }\n                if (typeof item[property] === 'object') {\n                    if (checkInside(item[property], term)) {\n                        return true;\n                    }\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return items.filter(function (item) {\n            return checkInside(item, term);\n        });\n    }\n}\nNg2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) { return new (t || Ng2SearchPipe)(); };\nNg2SearchPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"filter\", type: Ng2SearchPipe, pure: false });\nNg2SearchPipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng2SearchPipe, factory: Ng2SearchPipe.ɵfac });\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'filter',\n                pure: false\n            }]\n    }, {\n        type: Injectable\n    }], null, null); })();\n\nclass Ng2SearchPipeModule {\n}\nNg2SearchPipeModule.ɵfac = function Ng2SearchPipeModule_Factory(t) { return new (t || Ng2SearchPipeModule)(); };\nNg2SearchPipeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Ng2SearchPipeModule });\nNg2SearchPipeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2SearchPipeModule, { declarations: [Ng2SearchPipe], exports: [Ng2SearchPipe] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SelectCropRoutingModule } from './select-crop-routing.module';\nimport { SelectCropComponent } from './select-crop.component';\nimport { MaterialModule } from '../../material/material.module';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n\n@NgModule({\n  declarations: [SelectCropComponent],\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        SelectCropRoutingModule,\n        MaterialModule,\n        FormsModule,\n        Ng2SearchPipeModule,\n        MatProgressSpinnerModule\n    ]\n})\nexport class SelectCropModule { }\n"],"x_google_ignoreList":[3]}